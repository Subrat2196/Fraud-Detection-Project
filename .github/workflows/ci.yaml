name: CI Pipeline 
# name of the workflow

on: push 
# trigger the workflow whenever there is a git push in this branch 

# the jobs that will be run when the workflow is triggered
jobs:
  project-testing: # id of the job
    runs-on: ubuntu-latest # virtual machine where job will be run

    steps:
      - name: checkout code # take the code to the remote Github actions server
        uses: actions/checkout@v3 

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies # speeds up the workflow by caching pip-installed packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
          echo "DAGSHUB_TOKEN=${{ secrets.DAGSHUB_TOKEN }}" >> $GITHUB_ENV
          

      - name: run Pipeline
        run: |
          dvc repro 

      - name: login to AWS ECR
        if: success()
        run: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
            aws configure set region ${{ secrets.AWS_REGION }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
            docker build -t ${{ secrets.AWS_ECR_REPO }}:latest .

      - name: Tag Docker image
        run: |
            docker tag ${{ secrets.AWS_ECR_REPO }}:latest \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPO }}:latest

    
      - name: Check Docker Authentication
        run: docker info

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPO }}:latest

      - name: Set Up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name flask-app-cluster

      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
      